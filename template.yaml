# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sqs

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: stockToQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt StockSqsQueue.Arn
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: dynamodb_ECOM_table_access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ECOM_*"

  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
          STOCK_SQS_URL: !Ref StockSqsQueue
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET

  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST


# ============================= demo =======================
  checkoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app/checkout.handler
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
          STOCK_SQS_URL: !Ref StockSqsQueue
      Events:
        Api:
          Type: Api
          Properties:
            Path: /checkout
            Method: post

  StockSQSQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app/stock_mgt.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          STOCK_HOLD_TABLE: !Ref StockHoldTable
      Events:
        StockSqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt StockSqsQueue.Arn
            BatchSize: 10

  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  StockChangeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ECOM_stock_change
      AttributeDefinitions:
        - AttributeName: "stock_id"
          AttributeType: "S"
        - AttributeName: "created_at"
          AttributeType: "S"
        - AttributeName: "action" #hold, set, sold
          AttributeType: "S"
        # - AttributeName: "action_amount"
        #   AttributeType: "N"
        - AttributeName: "reference"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "stock_id"
          KeyType: "HASH"
        - AttributeName: "created_at"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: action-created_at-index
          KeySchema:
            - AttributeName: "action"
              KeyType: "HASH"
            - AttributeName: "created_at"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        - IndexName: reference-index
          KeySchema:
            - AttributeName: "reference"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL

  StockHoldTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ECOM_stock_hold
      AttributeDefinitions:
        - AttributeName: "stock_id"
          AttributeType: "S"
        - AttributeName: "created_at"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "stock_id"
          KeyType: "HASH"
        - AttributeName: "created_at"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: created_at-index
          KeySchema:
            - AttributeName: "created_at"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL

  StockSqsQueue:
      Type: AWS::SQS::Queue

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
